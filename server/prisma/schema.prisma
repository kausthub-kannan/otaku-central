generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  previewFeatures = ["deno"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bucket {
  user_id   String   @id(map: "bucket_pk") @db.VarChar
  wiki_id   String?  @db.VarChar
  completed Boolean?
  ongoing   Boolean?
  dropped   Boolean?
  users     users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "bucket_id_from_user_id")
  wiki      wiki?    @relation(fields: [wiki_id], references: [wiki_id], onDelete: Cascade, onUpdate: NoAction, map: "wiki_id_from_wiki_id_fk")
}

model chronicle {
  chronicle_id String  @id(map: "chronicle_id") @db.VarChar
  texts        String?
  likes        Int?
  writer_id    String? @db.VarChar
  users        users?  @relation(fields: [writer_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "writer_id_from_user_id_fk")
}

model merch {
  merch_id           String   @id(map: "merch_id_pk") @db.VarChar
  req_nani           Int?
  rating             Int?
  description        String?
  merch              String?  @db.VarChar
  seller_id          String?  @db.VarChar
  image              String?  @db.VarChar
  avalibility_status Boolean?
  users              users?   @relation(fields: [seller_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "seller_id_from_user_id_fk")
}

model nexus {
  nexus_id     String  @id(map: "nexus_id_pk") @db.VarChar
  user_id      String? @db.VarChar
  reply_to     String? @db.VarChar
  comment      String?
  upvotes      Int?
  chronicle_id String? @db.VarChar
  users        users?  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "nexus_user_id_from_user_id_fk")
}

model quizzes {
  quiz_id        String    @id(map: "quiz_id_pk") @db.VarChar
  mod_id         String?   @db.VarChar
  difficulty_lvl Int?
  created_date   DateTime? @db.Date
  anime_name     String?   @db.VarChar
  wiki           wiki?     @relation(fields: [anime_name], references: [anime_name], onDelete: Cascade, onUpdate: NoAction, map: "anime_name_from_anime_name__fk")
  users          users?    @relation(fields: [mod_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "mod_id_from_user_id_fk")
}

model season {
  season_number Int     @id(map: "_pk")
  wiki_id       String? @db.VarChar
  summary       String?
  poster        String? @db.VarChar
  episode_list  Int?
  wiki          wiki?   @relation(fields: [wiki_id], references: [wiki_id], onDelete: Cascade, onUpdate: NoAction, map: "wiki_id_from_wiki_id_fk")
}

model users {
  email_id    String      @db.VarChar
  guild       String      @db.VarChar
  user_id     String      @id(map: "user_id") @db.VarChar
  username    String?     @db.VarChar
  joined_date DateTime?   @db.Date
  nani        Int?
  avatar      Int?
  bucket      bucket?
  chronicle   chronicle[]
  merch       merch[]
  nexus       nexus[]
  quizzes     quizzes[]
}

model wiki {
  wiki_id    String    @id(map: "wiki_id_pk") @db.VarChar
  anime_name String?   @unique(map: "anime_name_uk") @db.VarChar
  poster     String?   @db.VarChar
  summary    String?
  status     Boolean?
  rating     Int?
  bucket     bucket[]
  quizzes    quizzes[]
  season     season[]
}
